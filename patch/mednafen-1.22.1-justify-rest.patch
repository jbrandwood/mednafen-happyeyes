diff -Naur mednafen-pure/src/md/debug.cpp mednafen/src/md/debug.cpp
--- mednafen-pure/src/md/debug.cpp	2019-01-27 22:52:37.000000000 -0800
+++ mednafen/src/md/debug.cpp	2019-03-07 17:42:51.190882400 -0800
@@ -65,34 +65,34 @@
 
 static RegType M68K_Regs[] =
 {
-        { M68K::GSREG_PC, "PC", "Program Counter", 4 },
+        { M68K::GSREG_PC,	1,	"PC", "Program Counter", 4 },
 
-        { 0, "------", "", 0xFFFF },
+        { 0, 0, "------", "", 0xFFFF },
 
-	{ M68K::GSREG_D0 + 0, "D0", "D0(Data Register 0)", 4 },
-        { M68K::GSREG_D0 + 1, "D1", "D1(Data Register 1)", 4 },
-        { M68K::GSREG_D0 + 2, "D2", "D2(Data Register 2)", 4 },
-        { M68K::GSREG_D0 + 3, "D3", "D3(Data Register 3)", 4 },
-        { M68K::GSREG_D0 + 4, "D4", "D4(Data Register 4)", 4 },
-        { M68K::GSREG_D0 + 5, "D5", "D5(Data Register 5)", 4 },
-        { M68K::GSREG_D0 + 6, "D6", "D6(Data Register 6)", 4 },
-        { M68K::GSREG_D0 + 7, "D7", "D7(Data Register 7)", 4 },
-
-        { 0, "------", "", 0xFFFF },
-
-        { M68K::GSREG_A0 + 0, "A0", "A0(Address Register 0)", 4 },
-        { M68K::GSREG_A0 + 1, "A1", "A1(Address Register 1)", 4 },
-        { M68K::GSREG_A0 + 2, "A2", "A2(Address Register 2)", 4 },
-        { M68K::GSREG_A0 + 3, "A3", "A3(Address Register 3)", 4 },
-        { M68K::GSREG_A0 + 4, "A4", "A4(Address Register 4)", 4 },
-        { M68K::GSREG_A0 + 5, "A5", "A5(Address Register 5)", 4 },
-        { M68K::GSREG_A0 + 6, "A6", "A6(Address Register 6)", 4 },
-        { M68K::GSREG_A0 + 7, "A7", "A7/USP(Address Register 7 / User Stack Pointer)", 4 },
+	{ M68K::GSREG_D0 + 0,	1,	"D0", "D0(Data Register 0)", 4 },
+        { M68K::GSREG_D0 + 1,	1,	"D1", "D1(Data Register 1)", 4 },
+        { M68K::GSREG_D0 + 2,	1,	"D2", "D2(Data Register 2)", 4 },
+        { M68K::GSREG_D0 + 3,	1,	"D3", "D3(Data Register 3)", 4 },
+        { M68K::GSREG_D0 + 4,	1,	"D4", "D4(Data Register 4)", 4 },
+        { M68K::GSREG_D0 + 5,	1,	"D5", "D5(Data Register 5)", 4 },
+        { M68K::GSREG_D0 + 6,	1,	"D6", "D6(Data Register 6)", 4 },
+        { M68K::GSREG_D0 + 7,	1,	"D7", "D7(Data Register 7)", 4 },
+
+        { 0, 0, "------", "", 0xFFFF },
+
+        { M68K::GSREG_A0 + 0,	1,	"A0", "A0(Address Register 0)", 4 },
+        { M68K::GSREG_A0 + 1,	1,	"A1", "A1(Address Register 1)", 4 },
+        { M68K::GSREG_A0 + 2,	1,	"A2", "A2(Address Register 2)", 4 },
+        { M68K::GSREG_A0 + 3,	1,	"A3", "A3(Address Register 3)", 4 },
+        { M68K::GSREG_A0 + 4,	1,	"A4", "A4(Address Register 4)", 4 },
+        { M68K::GSREG_A0 + 5,	1,	"A5", "A5(Address Register 5)", 4 },
+        { M68K::GSREG_A0 + 6,	1,	"A6", "A6(Address Register 6)", 4 },
+        { M68K::GSREG_A0 + 7,	1,	"A7", "A7/USP(Address Register 7 / User Stack Pointer)", 4 },
 
-        { 0, "------", "", 0xFFFF },
-	{ M68K::GSREG_SR, "SR", "Status Register", 2 },
+        { 0, 0, "------", "", 0xFFFF },
+	{ M68K::GSREG_SR,	1,	"SR", "Status Register", 2 },
 
-        { 0, "", "", 0 },
+        { 0, 0, "", "", 0 },
 };
 
 static const RegGroupType M68K_RegsGroup =
diff -Naur mednafen-pure/src/nes/boards/mmc1.cpp mednafen/src/nes/boards/mmc1.cpp
--- mednafen-pure/src/nes/boards/mmc1.cpp	2019-01-27 22:52:37.000000000 -0800
+++ mednafen/src/nes/boards/mmc1.cpp	2019-03-07 17:42:51.190882400 -0800
@@ -151,13 +151,13 @@
 
 static RegType DBGMMC1Regs[] =
 {
- { MMC1_GSREG_CONTROL, "Control", "Control(MMC1 register 0)", 1 },
- { MMC1_GSREG_CHRBANK0, "CHRBank0", "CHR Bank Register 0(MMC1 register 1)", 1 },
- { MMC1_GSREG_CHRBANK1, "CHRBank1", "CHR Bank Register 1(MMC1 register 2)", 1 },
- { MMC1_GSREG_PRGBANK, "PRGBank", "PRG Bank Bank Register(MMC1 register 3)", 1 },
- { MMC1_GSREG_BUFFER, "Buffer", "Shifty buffer that takes your moneys!", 1 },
- { MMC1_GSREG_BUFFERSHIFT, "BufferShift", "Place to stick bit in shifty bit buffer", 1 },
- { 0, "", "", 0 },
+ { MMC1_GSREG_CONTROL,		1,	"Control", "Control(MMC1 register 0)", 1 },
+ { MMC1_GSREG_CHRBANK0,		1,	"CHRBank0", "CHR Bank Register 0(MMC1 register 1)", 1 },
+ { MMC1_GSREG_CHRBANK1,		1,	"CHRBank1", "CHR Bank Register 1(MMC1 register 2)", 1 },
+ { MMC1_GSREG_PRGBANK,		1,	"PRGBank", "PRG Bank Bank Register(MMC1 register 3)", 1 },
+ { MMC1_GSREG_BUFFER,		1,	"Buffer", "Shifty buffer that takes your moneys!", 1 },
+ { MMC1_GSREG_BUFFERSHIFT,	1,	"BufferShift", "Place to stick bit in shifty bit buffer", 1 },
+ { 0, 0, "", "", 0 },
 };
 
 static uint32 MMC1DBG_GetRegister(const unsigned int id, char *special, const uint32 special_len)
diff -Naur mednafen-pure/src/nes/boards/mmc3.cpp mednafen/src/nes/boards/mmc3.cpp
--- mednafen-pure/src/nes/boards/mmc3.cpp	2019-01-27 22:52:37.000000000 -0800
+++ mednafen/src/nes/boards/mmc3.cpp	2019-03-07 17:42:51.206482400 -0800
@@ -1257,23 +1257,23 @@
 
 static RegType DBGMMC3Regs[] =
 {
- { MMC3_GSREG_CONTROL, "Control", "Command/Control", 1 },
- { MMC3_GSREG_MIRRORING, "Mirroring", "Mirroring", 1 },
- { MMC3_GSREG_WRAMPROTECT, "WRAMProtect", "Cart WRAM Protect", 1 },
- { MMC3_GSREG_CHRBANK0, "CHRBank0", "CHR Bank(2KiB) Register 0", 1 },
- { MMC3_GSREG_CHRBANK1, "CHRBank1", "CHR Bank(2KiB) Register 1", 1 },
- { MMC3_GSREG_CHRBANK2, "CHRBank2", "CHR Bank(1KiB) Register 2", 1 },
- { MMC3_GSREG_CHRBANK3, "CHRBank3", "CHR Bank(1KiB) Register 3", 1 },
- { MMC3_GSREG_CHRBANK4, "CHRBank4", "CHR Bank(1KiB) Register 4", 1 },
- { MMC3_GSREG_CHRBANK5, "CHRBank5", "CHR Bank(1KiB) Register 5", 1 },
- { MMC3_GSREG_PRGBANK0, "PRGBank0", "PRG Bank(8KiB, @8000 or C000) Register 0", 1 },
- { MMC3_GSREG_PRGBANK1, "PRGBank1", "PRG Bank(8KiB, @A000) Register 1", 1 },
+ { MMC3_GSREG_CONTROL,		1,	"Control", "Command/Control", 1 },
+ { MMC3_GSREG_MIRRORING,	1,	"Mirroring", "Mirroring", 1 },
+ { MMC3_GSREG_WRAMPROTECT,	1,	"WRAMProtect", "Cart WRAM Protect", 1 },
+ { MMC3_GSREG_CHRBANK0,		1,	"CHRBank0", "CHR Bank(2KiB) Register 0", 1 },
+ { MMC3_GSREG_CHRBANK1,		1,	"CHRBank1", "CHR Bank(2KiB) Register 1", 1 },
+ { MMC3_GSREG_CHRBANK2,		1,	"CHRBank2", "CHR Bank(1KiB) Register 2", 1 },
+ { MMC3_GSREG_CHRBANK3,		1,	"CHRBank3", "CHR Bank(1KiB) Register 3", 1 },
+ { MMC3_GSREG_CHRBANK4,		1,	"CHRBank4", "CHR Bank(1KiB) Register 4", 1 },
+ { MMC3_GSREG_CHRBANK5,		1,	"CHRBank5", "CHR Bank(1KiB) Register 5", 1 },
+ { MMC3_GSREG_PRGBANK0,		1,	"PRGBank0", "PRG Bank(8KiB, @8000 or C000) Register 0", 1 },
+ { MMC3_GSREG_PRGBANK1,		1,	"PRGBank1", "PRG Bank(8KiB, @A000) Register 1", 1 },
 
- { MMC3_GSREG_IRQCOUNT, "IRQCount", "IRQ Counter", 1 },
- { MMC3_GSREG_IRQLATCH, "IRQLatch", "IRQ Counter Latch", 1 },
- { MMC3_GSREG_IRQENABLE, "IRQEnable", "IRQ Counter Enable", 1 },
+ { MMC3_GSREG_IRQCOUNT,		1,	"IRQCount", "IRQ Counter", 1 },
+ { MMC3_GSREG_IRQLATCH,		1,	"IRQLatch", "IRQ Counter Latch", 1 },
+ { MMC3_GSREG_IRQENABLE,	1,	"IRQEnable", "IRQ Counter Enable", 1 },
 
- { 0, "", "", 0 },
+ { 0, 0, "", "", 0 },
 };
 
 static uint32 MMC3DBG_GetRegister(const unsigned int id, char *special, const uint32 special_len)
diff -Naur mednafen-pure/src/nes/boards/simple.cpp mednafen/src/nes/boards/simple.cpp
--- mednafen-pure/src/nes/boards/simple.cpp	2019-01-27 22:52:37.000000000 -0800
+++ mednafen/src/nes/boards/simple.cpp	2019-03-07 17:42:51.206482400 -0800
@@ -217,8 +217,8 @@
 #ifdef WANT_DEBUGGER
 static RegType DBGUNROMRegs[] =
 {
- { 0, "PRGBank", "PRG Bank, 16KiB @8000", 1 },
- { 0, "", "", 0 },
+ { 0,	1,	"PRGBank", "PRG Bank, 16KiB @8000", 1 },
+ { 0,	1,	"", "", 0 },
 };
 
 static uint32 UNROMDBG_GetRegister(const unsigned int id, char *special, const uint32 special_len)
diff -Naur mednafen-pure/src/nes/debug.cpp mednafen/src/nes/debug.cpp
--- mednafen-pure/src/nes/debug.cpp	2019-01-27 22:52:37.000000000 -0800
+++ mednafen/src/nes/debug.cpp	2019-03-07 17:42:51.222082400 -0800
@@ -374,14 +374,14 @@
 
 static RegType NESCPURegs[] =
 {
-        { CPU_GSREG_PC, "PC", "Program Counter", 2 },
-        { CPU_GSREG_A, "A", "Accumulator", 1 },
-        { CPU_GSREG_X, "X", "X Index", 1 },
-        { CPU_GSREG_Y, "Y", "Y Index", 1 },
-        { CPU_GSREG_SP, "SP", "Stack Pointer", 1 },
-        { CPU_GSREG_P, "P", "Status", 1 },
-	{ CPU_GSREG_TIMESTAMP, "TiSt", "Timestamp", 4 },
-        { 0, "", "", 0 },
+        { CPU_GSREG_PC,	1,	"PC", "Program Counter", 2 },
+        { CPU_GSREG_A,	1,	"A", "Accumulator", 1 },
+        { CPU_GSREG_X,	1,	"X", "X Index", 1 },
+        { CPU_GSREG_Y,	1,	"Y", "Y Index", 1 },
+        { CPU_GSREG_SP,	1,	"SP", "Stack Pointer", 1 },
+        { CPU_GSREG_P,	1,	"P", "Status", 1 },
+	{ CPU_GSREG_TIMESTAMP,	1,	"TiSt", "Timestamp", 4 },
+        { 0, 0, "", "", 0 },
 };
 
 static uint32 GetRegister_CPU(const unsigned int id, char *special, const uint32 special_len)
@@ -475,17 +475,17 @@
 
 static RegType NESPPURegs[] =
 {
-        { PPU_GSREG_PPU0, "PPU0", "PPU0", 1 },
-        { PPU_GSREG_PPU1, "PPU1", "PPU1", 1 },
-        { PPU_GSREG_PPU2, "PPU2", "PPU2", 1 },
-        { PPU_GSREG_PPU3, "PPU3", "PPU3", 1 },
-        { PPU_GSREG_XOFFSET, "XOffset", "Tile X Offset", 1},
-        { PPU_GSREG_RADDR, "RAddr", "Refresh Address", 2},
-        { PPU_GSREG_TADDR, "TAddr", "Temp Address", 2},
-        { PPU_GSREG_VRAMBUF, "VRAM Buf", "VRAM Buffer", 1},
-        { PPU_GSREG_VTOGGLE, "V-Toggle", "High/low Toggle", 1},
-        { PPU_GSREG_SCANLINE, "Scanline", "Current Scanline(0 = first visible, 0xF0 = in vblank)", 1 },
-        { 0, "", "", 0 },
+        { PPU_GSREG_PPU0,	1,	"PPU0", "PPU0", 1 },
+        { PPU_GSREG_PPU1,	1,	"PPU1", "PPU1", 1 },
+        { PPU_GSREG_PPU2,	1,	"PPU2", "PPU2", 1 },
+        { PPU_GSREG_PPU3,	1,	"PPU3", "PPU3", 1 },
+        { PPU_GSREG_XOFFSET,	1,	"XOffset", "Tile X Offset", 1},
+        { PPU_GSREG_RADDR,	1,	"RAddr", "Refresh Address", 2},
+        { PPU_GSREG_TADDR,	1,	"TAddr", "Temp Address", 2},
+        { PPU_GSREG_VRAMBUF,	1,	"VRAM Buf", "VRAM Buffer", 1},
+        { PPU_GSREG_VTOGGLE,	1,	"V-Toggle", "High/low Toggle", 1},
+        { PPU_GSREG_SCANLINE,	1,	"Scanline", "Current Scanline(0 = first visible, 0xF0 = in vblank)", 1 },
+        { 0, 0, "", "", 0 },
 };
 
 static RegGroupType NESPPURegsGroup =
diff -Naur mednafen-pure/src/psx/debug.cpp mednafen/src/psx/debug.cpp
--- mednafen-pure/src/psx/debug.cpp	2019-01-27 22:52:37.000000000 -0800
+++ mednafen/src/psx/debug.cpp	2019-03-07 17:42:51.222082400 -0800
@@ -440,31 +440,32 @@
 
 static const RegType Regs_Misc[] =
 {
- { TIMER_GSREG_COUNTER0,	"COUNT0", "Counter 0", 2 	},
- { TIMER_GSREG_MODE0,		"MODE0", "Mode 0", 	2   	},
- { TIMER_GSREG_TARGET0,		"TARGET0", "Target 0",	2	},
+ { 0, 0, "--TIMER-0--", "", 0xFFFF },
+ { TIMER_GSREG_COUNTER0,        2,      "Count",        "Counter 0",    2 },
+ { TIMER_GSREG_MODE0,           3,      "Mode",         "Mode 0",       2 },
+ { TIMER_GSREG_TARGET0,         1,      "Target",       "Target 0",     2 },
 
- { 0, "------", "", 0xFFFF },
+ { 0, 0, "--TIMER-1--", "", 0xFFFF },
 
+ { TIMER_GSREG_COUNTER1,        2,      "Count",        "Counter 1",    2 },
+ { TIMER_GSREG_MODE1,           3,      "Mode",         "Mode 1",       2 },
+ { TIMER_GSREG_TARGET1,         1,      "Target",       "Target 1",     2 },
 
- { TIMER_GSREG_COUNTER1,	"COUNT1", "Counter 1", 2 	},
- { TIMER_GSREG_MODE1,		"MODE1", "Mode 1", 	2   	},
- { TIMER_GSREG_TARGET1,		"TARGET1", "Target 1",	2	},
+ { 0, 0, "--TIMER-2--", "", 0xFFFF },
 
- { 0, "------", "", 0xFFFF },
+ { TIMER_GSREG_COUNTER2,        2,      "Count",        "Counter 2",    2 },
+ { TIMER_GSREG_MODE2,           3,      "Mode",         "Mode 2",       2 },
+ { TIMER_GSREG_TARGET2,         1,      "Target",       "Target 2",     2 },
 
- { TIMER_GSREG_COUNTER2,	"COUNT2", "Counter 2", 2 	},
- { TIMER_GSREG_MODE2,		"MODE2", "Mode 2", 	2   	},
- { TIMER_GSREG_TARGET2,		"TARGET2", "Target 2",	2	},
+ { 0, 0, "----IRQ----", "", 0xFFFF },
 
- { 0, "------", "", 0xFFFF },
- { 0, "------", "", 0xFFFF },
+ { 0x10000 | IRQ_GSREG_ASSERTED,1,      "Assert",       "IRQ Asserted", 2 },
+ { 0x10000 | IRQ_GSREG_STATUS,  1,      "Status",       "IRQ Status",   2 },
+ { 0x10000 | IRQ_GSREG_MASK,    3,      "Mask",         "IRQ Mask",     2 },
 
- { 0x10000 | IRQ_GSREG_ASSERTED,	"ASSERTD",	"IRQ Asserted",	2 },
- { 0x10000 | IRQ_GSREG_STATUS,		"STATUS",	"IRQ Status", 2 },
- { 0x10000 | IRQ_GSREG_MASK,		"MASK",		"IRQ Mask", 2 },
+ { 0, 0, "-----------", "", 0xFFFF },
 
- { 0, "", "", 0 }
+ { 0, 0, "", "", 0 }
 };
 
 
@@ -494,85 +495,88 @@
 
 static const RegType Regs_SPU[] =
 {
- { PS_SPU::GSREG_SPUCONTROL, "SPUCTRL", "SPU Control", 2 },
+ { 0, 0, "------SPU------", "", 0xFFFF },
+ { PS_SPU::GSREG_SPUCONTROL,    4,      "SPUCtrl", "SPU Control", 2 },
 
- { PS_SPU::GSREG_FM_ON, "FMOn", "FM Enable", 3 },
- { PS_SPU::GSREG_NOISE_ON, "NoiseOn", "Noise Enable", 3 },
- { PS_SPU::GSREG_REVERB_ON, "ReverbOn", "Reverb Enable", 3 },
-
- { PS_SPU::GSREG_CDVOL_L, "CDVolL", "CD Volume Left", 2 },
- { PS_SPU::GSREG_CDVOL_R, "CDVolR", "CD Volume Right", 2 },
-
- { PS_SPU::GSREG_RVBVOL_L, "RvbVolL", "Reverb Volume Left", 2 },
- { PS_SPU::GSREG_RVBVOL_R, "RvbVolR", "Reverb Volume Right", 2 },
-
- { PS_SPU::GSREG_MAINVOL_CTRL_L, "MainVolCL", "Main Volume Control Left", 2 },
- { PS_SPU::GSREG_MAINVOL_CTRL_R, "MainVolCR", "Main Volume Control Right", 2 },
-
- { PS_SPU::GSREG_MAINVOL_L, "MainVolL", "Dry Volume Left", 2 },
- { PS_SPU::GSREG_MAINVOL_R, "MainVolR", "Dry Volume Right", 2 },
-
- { PS_SPU::GSREG_RWADDR, "RWAddr", "SPURAM Read/Write Address", 3 },
-
- { PS_SPU::GSREG_IRQADDR, "IRQAddr", "IRQ Compare Address", 3 },
-
- { PS_SPU::GSREG_REVERBWA, "ReverbWA", "Reverb Work Area(Raw)", 2 },
-
- { PS_SPU::GSREG_VOICEON, "VoiceOn", "Voice On", 3 },
- { PS_SPU::GSREG_VOICEOFF, "VoiceOff", "Voice Off", 3 },
- { PS_SPU::GSREG_BLOCKEND, "BlockEnd", "Block End", 3 },
-
-
- { 0, "------", "", 0xFFFF },
-
- { PS_SPU::GSREG_FB_SRC_A, "FB_SRC_A", "", 2 },
- { PS_SPU::GSREG_FB_SRC_B, "FB_SRC_B", "", 2 },
- { PS_SPU::GSREG_IIR_ALPHA, "IIR_ALPHA", "", 2 },
- { PS_SPU::GSREG_ACC_COEF_A, "ACC_COEF_A", "", 2 },
- { PS_SPU::GSREG_ACC_COEF_B, "ACC_COEF_B", "", 2 },
- { PS_SPU::GSREG_ACC_COEF_C, "ACC_COEF_C", "", 2 },
- { PS_SPU::GSREG_ACC_COEF_D, "ACC_COEF_D", "", 2 },
- { PS_SPU::GSREG_IIR_COEF, "IIR_COEF", "", 2 },
- { PS_SPU::GSREG_FB_ALPHA, "FB_ALPHA", "", 2 },
- { PS_SPU::GSREG_FB_X, "FB_X", "", 2 },
- { PS_SPU::GSREG_IIR_DEST_A0, "IIR_DST_A0", "", 2 },
- { PS_SPU::GSREG_IIR_DEST_A1, "IIR_DST_A1", "", 2 },
- { PS_SPU::GSREG_ACC_SRC_A0, "ACC_SRC_A0", "", 2 },
- { PS_SPU::GSREG_ACC_SRC_A1, "ACC_SRC_A1", "", 2 },
- { PS_SPU::GSREG_ACC_SRC_B0, "ACC_SRC_B0", "", 2 },
- { PS_SPU::GSREG_ACC_SRC_B1, "ACC_SRC_B1", "", 2 },
- { PS_SPU::GSREG_IIR_SRC_A0, "IIR_SRC_A0", "", 2 },
- { PS_SPU::GSREG_IIR_SRC_A1, "IIR_SRC_A1", "", 2 },
- { PS_SPU::GSREG_IIR_DEST_B0, "IIR_DST_B0", "", 2 },
- { PS_SPU::GSREG_IIR_DEST_B1, "IIR_DST_B1", "", 2 },
- { PS_SPU::GSREG_ACC_SRC_C0, "ACC_SRC_C0", "", 2 },
- { PS_SPU::GSREG_ACC_SRC_C1, "ACC_SRC_C1", "", 2 },
- { PS_SPU::GSREG_ACC_SRC_D0, "ACC_SRC_D0", "", 2 },
- { PS_SPU::GSREG_ACC_SRC_D1, "ACC_SRC_D1", "", 2 },
- { PS_SPU::GSREG_IIR_SRC_B1, "IIR_SRC_B1", "", 2 },
- { PS_SPU::GSREG_IIR_SRC_B0, "IIR_SRC_B0", "", 2 },
- { PS_SPU::GSREG_MIX_DEST_A0, "MIX_DST_A0", "", 2 },
- { PS_SPU::GSREG_MIX_DEST_A1, "MIX_DST_A1", "", 2 },
- { PS_SPU::GSREG_MIX_DEST_B0, "MIX_DST_B0", "", 2 },
- { PS_SPU::GSREG_MIX_DEST_B1, "MIX_DST_B1", "", 2 },
- { PS_SPU::GSREG_IN_COEF_L, "IN_COEF_L", "", 2 },
- { PS_SPU::GSREG_IN_COEF_R, "IN_COEF_R", "", 2 },
-
- { 0, "", "", 0 },
-};
-
-#define VOICE_HELPER(v)									\
- { 0, "--V"#v"--", "", 0xFFFF },							\
- { PS_SPU:: GSREG_V0_VOL_CTRL_L + v * 256, "VolCL", "Volume Control Left", 2 },		\
- { PS_SPU:: GSREG_V0_VOL_CTRL_R + v * 256, "VolCR", "Volume Control Right", 2 },	\
- { PS_SPU:: GSREG_V0_VOL_L + v * 256, "VolL", "Volume Left", 2 },			\
- { PS_SPU:: GSREG_V0_VOL_R + v * 256, "VolR", "Volume Right", 2 },			\
- { PS_SPU:: GSREG_V0_PITCH + v * 256, "Pitch", "Pitch", 2 },				\
- { PS_SPU:: GSREG_V0_STARTADDR + v * 256, "SAddr", "Start Address", 3 },		\
- { PS_SPU:: GSREG_V0_ADSR_CTRL + v * 256, "ADSRCTRL", "ADSR Control", 4 },		\
- { PS_SPU:: GSREG_V0_ADSR_LEVEL + v * 256, "ADSRLev", "ADSR Level", 2 },		\
- { PS_SPU:: GSREG_V0_LOOP_ADDR + v * 256, "LAddr", "Loop Address", 3 },			\
- { PS_SPU:: GSREG_V0_READ_ADDR + v * 256, "RAddr", "Read Address", 3 }
+ { PS_SPU::GSREG_FM_ON,         5,      "FMOn", "FM Enable", 3 },
+ { PS_SPU::GSREG_NOISE_ON,      2,      "NoiseOn", "Noise Enable", 3 },
+ { PS_SPU::GSREG_REVERB_ON,     1,      "ReverbOn", "Reverb Enable", 3 },
+
+ { PS_SPU::GSREG_CDVOL_L,       5,      "CDVolL", "CD Volume Left", 2 },
+ { PS_SPU::GSREG_CDVOL_R,       5,      "CDVolR", "CD Volume Right", 2 },
+
+ { PS_SPU::GSREG_RVBVOL_L,      4,      "RvbVolL", "Reverb Volume Left", 2 },
+ { PS_SPU::GSREG_RVBVOL_R,      4,      "RvbVolR", "Reverb Volume Right", 2 },
+
+ { PS_SPU::GSREG_MAINVOL_CTRL_L,2,      "MainVolCL", "Main Volume Control Left", 2 },
+ { PS_SPU::GSREG_MAINVOL_CTRL_R,2,      "MainVolCR", "Main Volume Control Right", 2 },
+
+ { PS_SPU::GSREG_MAINVOL_L,     3,      "MainVolL", "Dry Volume Left", 2 },
+ { PS_SPU::GSREG_MAINVOL_R,     3,      "MainVolR", "Dry Volume Right", 2 },
+
+ { PS_SPU::GSREG_RWADDR,        3,      "RWAddr", "SPURAM Read/Write Address", 3 },
+
+ { PS_SPU::GSREG_IRQADDR,       2,      "IRQAddr", "IRQ Compare Address", 3 },
+
+ { PS_SPU::GSREG_REVERBWA,      3,      "ReverbWA", "Reverb Work Area(Raw)", 2 },
+
+ { PS_SPU::GSREG_VOICEON,       2,      "VoiceOn", "Voice On", 3 },
+ { PS_SPU::GSREG_VOICEOFF,      1,      "VoiceOff", "Voice Off", 3 },
+ { PS_SPU::GSREG_BLOCKEND,      1,      "BlockEnd", "Block End", 3 },
+
+
+/* { 0, 0, "---------------", "", 0xFFFF }, */
+
+/* { PS_SPU::GSREG_FB_SRC_A,    3,      "FB_SRC_A", "", 2 }, */
+/* { PS_SPU::GSREG_FB_SRC_B,    3,      "FB_SRC_B", "", 2 }, */
+/* { PS_SPU::GSREG_IIR_ALPHA,   2,      "IIR_ALPHA", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_COEF_A,  1,      "ACC_COEF_A", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_COEF_B,  1,      "ACC_COEF_B", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_COEF_C,  1,      "ACC_COEF_C", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_COEF_D,  1,      "ACC_COEF_D", "", 2 }, */
+/* { PS_SPU::GSREG_IIR_COEF,    3,      "IIR_COEF", "", 2 }, */
+/* { PS_SPU::GSREG_FB_ALPHA,    3,      "FB_ALPHA", "", 2 }, */
+/* { PS_SPU::GSREG_FB_X,                7,      "FB_X", "", 2 }, */
+/* { PS_SPU::GSREG_IIR_DEST_A0, 1,      "IIR_DST_A0", "", 2 }, */
+/* { PS_SPU::GSREG_IIR_DEST_A1, 1,      "IIR_DST_A1", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_SRC_A0,  1,      "ACC_SRC_A0", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_SRC_A1,  1,      "ACC_SRC_A1", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_SRC_B0,  1,      "ACC_SRC_B0", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_SRC_B1,  1,      "ACC_SRC_B1", "", 2 }, */
+/* { PS_SPU::GSREG_IIR_SRC_A0,  1,      "IIR_SRC_A0", "", 2 }, */
+/* { PS_SPU::GSREG_IIR_SRC_A1,  1,      "IIR_SRC_A1", "", 2 }, */
+/* { PS_SPU::GSREG_IIR_DEST_B0, 1,      "IIR_DST_B0", "", 2 }, */
+/* { PS_SPU::GSREG_IIR_DEST_B1, 1,      "IIR_DST_B1", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_SRC_C0,  1,      "ACC_SRC_C0", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_SRC_C1,  1,      "ACC_SRC_C1", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_SRC_D0,  1,      "ACC_SRC_D0", "", 2 }, */
+/* { PS_SPU::GSREG_ACC_SRC_D1,  1,      "ACC_SRC_D1", "", 2 }, */
+/* { PS_SPU::GSREG_IIR_SRC_B1,  1,      "IIR_SRC_B1", "", 2 }, */
+/* { PS_SPU::GSREG_IIR_SRC_B0,  1,      "IIR_SRC_B0", "", 2 }, */
+/* { PS_SPU::GSREG_MIX_DEST_A0, 1,      "MIX_DST_A0", "", 2 }, */
+/* { PS_SPU::GSREG_MIX_DEST_A1, 1,      "MIX_DST_A1", "", 2 }, */
+/* { PS_SPU::GSREG_MIX_DEST_B0, 1,      "MIX_DST_B0", "", 2 }, */
+/* { PS_SPU::GSREG_MIX_DEST_B1, 1,      "MIX_DST_B1", "", 2 }, */
+/* { PS_SPU::GSREG_IN_COEF_L,   2,      "IN_COEF_L", "", 2 }, */
+/* { PS_SPU::GSREG_IN_COEF_R,   2,      "IN_COEF_R", "", 2 }, */
+
+ { 0, 0, "---------------", "", 0xFFFF },
+
+ { 0, 0, "", "", 0 },
+};
+
+#define VOICE_HELPER(v)                         \
+ { 0, 0, "-----VOICE-"#v"-----", "", 0xFFFF },  \
+ { PS_SPU:: GSREG_V0_VOL_CTRL_L + v * 256,      8,      "VolCL", "Volume Control Left", 2 },    \
+ { PS_SPU:: GSREG_V0_VOL_CTRL_R + v * 256,      8,      "VolCR", "Volume Control Right", 2 },   \
+ { PS_SPU:: GSREG_V0_VOL_L + v * 256,           9,      "VolL", "Volume Left", 2 },             \
+ { PS_SPU:: GSREG_V0_VOL_R + v * 256,           9,      "VolR", "Volume Right", 2 },            \
+ { PS_SPU:: GSREG_V0_PITCH + v * 256,           8,      "Pitch", "Pitch", 2 },                  \
+ { PS_SPU:: GSREG_V0_STARTADDR + v * 256,       6,      "SAddr", "Start Address", 3 },          \
+ { PS_SPU:: GSREG_V0_ADSR_CTRL + v * 256,       1,      "ADSRCtrl", "ADSR Control", 4 },        \
+ { PS_SPU:: GSREG_V0_ADSR_LEVEL + v * 256,      6,      "ADSRLev", "ADSR Level", 2 },           \
+ { PS_SPU:: GSREG_V0_LOOP_ADDR + v * 256,       6,      "LAddr", "Loop Address", 3 },           \
+ { PS_SPU:: GSREG_V0_READ_ADDR + v * 256,       6,      "RAddr", "Read Address", 3 }
 
 
 static const RegType Regs_SPU_Voices[] =
@@ -593,7 +597,8 @@
  //VOICE_HELPER(22),
  //VOICE_HELPER(23),
 #endif
- { 0, "", "", 0 },
+ { 0, 0, "-----------------", "", 0xFFFF },
+ { 0, 0, "", "", 0 },
 };
 
 
@@ -626,55 +631,56 @@
 
 static const RegType Regs_CPU[] =
 {
-	{ PS_CPU::GSREG_PC, 	   "PC", "PC", 4 },
-	{ PS_CPU::GSREG_PC_NEXT,   "NPC", "Next PC", 4 },
-	{ PS_CPU::GSREG_IN_BD_SLOT, "INBD", "In Branch Delay Slot", 1 },
-        { 0, "------", "", 0xFFFF },
-        { PS_CPU::GSREG_GPR + 1,   "at", "Assembler Temporary", 4 },
-        { PS_CPU::GSREG_GPR + 2,   "v0", "Return Value 0", 4 },
-        { PS_CPU::GSREG_GPR + 3,   "v1", "Return Value 1", 4 },
-        { PS_CPU::GSREG_GPR + 4,   "a0", "Argument 0", 4 },
-        { PS_CPU::GSREG_GPR + 5,   "a1", "Argument 1", 4 },
-        { PS_CPU::GSREG_GPR + 6,   "a2", "Argument 2", 4 },
-        { PS_CPU::GSREG_GPR + 7,   "a3", "Argument 3", 4 },
-        { PS_CPU::GSREG_GPR + 8,   "t0", "Temporary 0", 4 },
-        { PS_CPU::GSREG_GPR + 9,   "t1", "Temporary 1", 4 },
-        { PS_CPU::GSREG_GPR + 10,   "t2", "Temporary 2", 4 },
-        { PS_CPU::GSREG_GPR + 11,   "t3", "Temporary 3", 4 },
-        { PS_CPU::GSREG_GPR + 12,   "t4", "Temporary 4", 4 },
-        { PS_CPU::GSREG_GPR + 13,   "t5", "Temporary 5", 4 },
-        { PS_CPU::GSREG_GPR + 14,   "t6", "Temporary 6", 4 },
-        { PS_CPU::GSREG_GPR + 15,   "t7", "Temporary 7", 4 },
-        { PS_CPU::GSREG_GPR + 16,   "s0", "Subroutine Reg Var 0", 4 },
-        { PS_CPU::GSREG_GPR + 17,   "s1", "Subroutine Reg Var 1", 4 },
-        { PS_CPU::GSREG_GPR + 18,   "s2", "Subroutine Reg Var 2", 4 },
-        { PS_CPU::GSREG_GPR + 19,   "s3", "Subroutine Reg Var 3", 4 },
-        { PS_CPU::GSREG_GPR + 20,   "s4", "Subroutine Reg Var 4", 4 },
-        { PS_CPU::GSREG_GPR + 21,   "s5", "Subroutine Reg Var 5", 4 },
-        { PS_CPU::GSREG_GPR + 22,   "s6", "Subroutine Reg Var 6", 4 },
-        { PS_CPU::GSREG_GPR + 23,   "s7", "Subroutine Reg Var 7", 4 },
-        { PS_CPU::GSREG_GPR + 24,   "t8", "Temporary 8", 4 },
-        { PS_CPU::GSREG_GPR + 25,   "t9", "Temporary 9", 4 },
-        { PS_CPU::GSREG_GPR + 26,   "k0", "Interrupt/Trap Handler Reg 0", 4 },
-        { PS_CPU::GSREG_GPR + 27,   "k1", "Interrupt/Trap Handler Reg 1", 4 },
-        { PS_CPU::GSREG_GPR + 28,   "gp", "Global Pointer", 4 },
-        { PS_CPU::GSREG_GPR + 29,   "sp", "Stack Pointer", 4 },
-        { PS_CPU::GSREG_GPR + 30,   "s8", "Subroutine Reg Var 8/Frame Pointer", 4 },
-        { PS_CPU::GSREG_GPR + 31,   "ra", "Return Address", 4 },
-        { 0, "------", "", 0xFFFF },
-	{ PS_CPU::GSREG_SR,	"SR",	"Status Register", 4 },
-	{ PS_CPU::GSREG_CAUSE,	"CAU",	"Cause Register", 4 },
-	{ PS_CPU::GSREG_EPC,	"EPC",	"EPC Register", 4 },
-        { 0, "------", "", 0xFFFF },
-	{ PS_CPU::GSREG_TAR,	"TAR",	"Target Address Register", 4 },
-	{ PS_CPU::GSREG_BADA,	"BADA",	"Bad Address Register", 4 },
-        { 0, "------", "", 0xFFFF },
-	{ PS_CPU::GSREG_BPC,	"BPC ",	"Breakpoint Program Counter Register", 4 },
-	{ PS_CPU::GSREG_BPCM,	"BPCM",	"Breakpoint Program Counter Mask", 4 },
-	{ PS_CPU::GSREG_BDA,	"BDA ",	"Breakpoint Data Address Register", 4 },
-	{ PS_CPU::GSREG_BDAM,	"BDAM",	"Breakpoint Data Address Mask", 4 },
-	{ PS_CPU::GSREG_DCIC,	"DCIC",	"Debug and Cache Invalidate Control", 4 },
-	{ 0, "", "", 0 }
+ { 0, 0, "-----CPU-----", "", 0xFFFF },
+ { PS_CPU::GSREG_PC,            3,      "PC", "PC", 4 },
+ { PS_CPU::GSREG_PC_NEXT,       2,      "NPC", "Next PC", 4 },
+ { PS_CPU::GSREG_IN_BD_SLOT,    7,      "INBD", "In Branch Delay Slot", 1 },
+ { 0, 0, "-----FLG-----", "", 0xFFFF },
+ { PS_CPU::GSREG_SR,            3,      "SR",   "Status Register", 4 },
+ { PS_CPU::GSREG_CAUSE,         2,      "CAU",  "Cause Register", 4 },
+ { PS_CPU::GSREG_EPC,           2,      "EPC",  "EPC Register", 4 },
+ { 0, 0, "-----REG-----", "", 0xFFFF },
+ { PS_CPU::GSREG_GPR + 1,       3,      "AT", "Assembler Temporary", 4 },
+ { PS_CPU::GSREG_GPR + 2,       3,      "V0", "Return Value 0", 4 },
+ { PS_CPU::GSREG_GPR + 3,       3,      "V1", "Return Value 1", 4 },
+ { PS_CPU::GSREG_GPR + 4,       3,      "A0", "Argument 0", 4 },
+ { PS_CPU::GSREG_GPR + 5,       3,      "A1", "Argument 1", 4 },
+ { PS_CPU::GSREG_GPR + 6,       3,      "A2", "Argument 2", 4 },
+ { PS_CPU::GSREG_GPR + 7,       3,      "A3", "Argument 3", 4 },
+ { PS_CPU::GSREG_GPR + 8,       3,      "T0", "Temporary 0", 4 },
+ { PS_CPU::GSREG_GPR + 9,       3,      "T1", "Temporary 1", 4 },
+ { PS_CPU::GSREG_GPR + 10,      3,      "T2", "Temporary 2", 4 },
+ { PS_CPU::GSREG_GPR + 11,      3,      "T3", "Temporary 3", 4 },
+ { PS_CPU::GSREG_GPR + 12,      3,      "T4", "Temporary 4", 4 },
+ { PS_CPU::GSREG_GPR + 13,      3,      "T5", "Temporary 5", 4 },
+ { PS_CPU::GSREG_GPR + 14,      3,      "T6", "Temporary 6", 4 },
+ { PS_CPU::GSREG_GPR + 15,      3,      "T7", "Temporary 7", 4 },
+ { PS_CPU::GSREG_GPR + 16,      3,      "S0", "Subroutine Reg Var 0", 4 },
+ { PS_CPU::GSREG_GPR + 17,      3,      "S1", "Subroutine Reg Var 1", 4 },
+ { PS_CPU::GSREG_GPR + 18,      3,      "S2", "Subroutine Reg Var 2", 4 },
+ { PS_CPU::GSREG_GPR + 19,      3,      "S3", "Subroutine Reg Var 3", 4 },
+ { PS_CPU::GSREG_GPR + 20,      3,      "S4", "Subroutine Reg Var 4", 4 },
+ { PS_CPU::GSREG_GPR + 21,      3,      "S5", "Subroutine Reg Var 5", 4 },
+ { PS_CPU::GSREG_GPR + 22,      3,      "S6", "Subroutine Reg Var 6", 4 },
+ { PS_CPU::GSREG_GPR + 23,      3,      "S7", "Subroutine Reg Var 7", 4 },
+ { PS_CPU::GSREG_GPR + 24,      3,      "T8", "Temporary 8", 4 },
+ { PS_CPU::GSREG_GPR + 25,      3,      "T9", "Temporary 9", 4 },
+ { PS_CPU::GSREG_GPR + 26,      3,      "K0", "Interrupt/Trap Handler Reg 0", 4 },
+ { PS_CPU::GSREG_GPR + 27,      3,      "K1", "Interrupt/Trap Handler Reg 1", 4 },
+ { PS_CPU::GSREG_GPR + 28,      3,      "GP", "Global Pointer", 4 },
+ { PS_CPU::GSREG_GPR + 29,      3,      "SP", "Stack Pointer", 4 },
+ { PS_CPU::GSREG_GPR + 30,      3,      "S8", "Subroutine Reg Var 8/Frame Pointer", 4 },
+ { PS_CPU::GSREG_GPR + 31,      3,      "RA", "Return Address", 4 },
+ { 0, 0, "----DEBUG----", "", 0xFFFF },
+ { PS_CPU::GSREG_TAR,           2,      "TAR",  "Target Address Register", 4 },
+ { PS_CPU::GSREG_BADA,          1,      "BADA", "Bad Address Register", 4 },
+ { PS_CPU::GSREG_BPC,           2,      "BPC",  "Breakpoint Program Counter Register", 4 },
+ { PS_CPU::GSREG_BPCM,          1,      "BPCM", "Breakpoint Program Counter Mask", 4 },
+ { PS_CPU::GSREG_BDA,           2,      "BDA",  "Breakpoint Data Address Register", 4 },
+ { PS_CPU::GSREG_BDAM,          1,      "BDAM", "Breakpoint Data Address Mask", 4 },
+ { PS_CPU::GSREG_DCIC,          1,      "DCIC", "Debug and Cache Invalidate Control", 4 },
+ { 0, 0, "-------------", "", 0xFFFF },
+ { 0, 0, "", "", 0 }
 };
 
 static uint32 GetRegister_CPU(const unsigned int id, char *special, const uint32 special_len)
diff -Naur mednafen-pure/src/ss/debug.inc mednafen/src/ss/debug.inc
--- mednafen-pure/src/ss/debug.inc	2019-01-27 22:52:37.000000000 -0800
+++ mednafen/src/ss/debug.inc	2019-03-07 18:10:16.284974200 -0800
@@ -496,118 +496,126 @@
 
 static const RegType DBG_Regs_CPU[] =
 {
- { SH7095::GSREG_PC_ID, "PC", "PC (Effective)", 4 },
- { SH7095::GSREG_RPC, "RPC", "PC (Real)", 4 },
+ { 0, 0, "----------------", "", 0xFFFF },
 
- { SH7095::GSREG_PID, "PID", "Pipeline ID Buffer", 4 },
- { SH7095::GSREG_PIF, "PIF", "Pipeline IF Buffer", 4 },
+ { SH7095::GSREG_PC_ID,		6,	"PC",		"PC (Effective)", 4 },
+ { SH7095::GSREG_RPC,		5,	"RPC",		"PC (Real)", 4 },
 
- { SH7095::GSREG_EP, "EP", "Exception Pending", 4 },
+ { SH7095::GSREG_PID,		5,	"PID",		"Pipeline ID Buffer", 4 },
+ { SH7095::GSREG_PIF,		5,	"PIF",		"Pipeline IF Buffer", 4 },
 
- { SH7095::GSREG_R0, "R0", "R0", 4 },
- { SH7095::GSREG_R1, "R1", "R1",  4 },
- { SH7095::GSREG_R2, "R2", "R2",  4 },
- { SH7095::GSREG_R3, "R3", "R3",  4 },
- { SH7095::GSREG_R4, "R4", "R4",  4 },
- { SH7095::GSREG_R5, "R5", "R5",  4 },
- { SH7095::GSREG_R6, "R6", "R6",  4 },
- { SH7095::GSREG_R7, "R7", "R7",  4 },
- { SH7095::GSREG_R8, "R8", "R8",  4 },
- { SH7095::GSREG_R9, "R9", "R9",  4 },
- { SH7095::GSREG_R10, "R10", "R10",  4 },
- { SH7095::GSREG_R11, "R11", "R11",  4 },
- { SH7095::GSREG_R12, "R12", "R12",  4 },
- { SH7095::GSREG_R13, "R13", "R13",  4 },
- { SH7095::GSREG_R14, "R14", "R14",  4 },
- { SH7095::GSREG_R15, "R15", "R15/Stack Pointer", 4 },
-
- { 0, "------", "", 0xFFFF },
-
- { SH7095::GSREG_SR, "SR", "Status Register", 4 },
- { SH7095::GSREG_GBR, "GBR", "Global Base Register", 4 },
- { SH7095::GSREG_VBR, "VBR", "Vector Base Register", 4 },
-
- { 0, "------", "", 0xFFFF },
-
- { SH7095::GSREG_MACH, "MACH", "Multiply-and-Accumulate High", 4 },
- { SH7095::GSREG_MACL, "MACL", "Multiply-and-Accumulate Low", 4 },
-
- { 0, "------", "", 0xFFFF },
-
- { SH7095::GSREG_PR, "PR", "Procedure Register", 4 },
-
- { 0, "------", "", 0xFFFF },
-
- { SH7095::GSREG_NMIL, "NMIL", "NMI Level(Input)", 1 },
- { SH7095::GSREG_IRL, "IRL", "Interrupt Level(Input)", 1 },
- { SH7095::GSREG_IPRA, "IPRA", "IPRA", 2 },
- { SH7095::GSREG_IPRB, "IPRB", "IPRB", 2 },
- { SH7095::GSREG_VCRWDT, "VCRWDT", "VCRWDT", 2 },
- { SH7095::GSREG_VCRA, "VCRA", "VCRA", 2 },
- { SH7095::GSREG_VCRB, "VCRB", "VCRB", 2 },
- { SH7095::GSREG_VCRC, "VCRC", "VCRC", 2 },
- { SH7095::GSREG_VCRD, "VCRD", "VCRD", 2 },
- { SH7095::GSREG_ICR, "ICR", "ICR", 2 },
-
- { 0, "------", "", 0xFFFF },
-
- { SH7095::GSREG_DVSR, "DVSR", "Divisor", 4 },
- { SH7095::GSREG_DVDNT, "DVDNT", "DVDNT", 4 },
- { SH7095::GSREG_DVDNTH, "DVDNTH", "DVDNTH", 4 },
- { SH7095::GSREG_DVDNTL, "DVDNTL", "DVDNTL", 4 },
- { SH7095::GSREG_DVDNTHS, "DVDNTHS", "DVDNTH Shadow", 4 },
- { SH7095::GSREG_DVDNTLS, "DVDNTLS", "DVDNTL Shadow", 4 },
- { SH7095::GSREG_VCRDIV, "VCRDIV", "VCRDIV", 2 },
- { SH7095::GSREG_DVCR, "DVCR", "DVCR", 1 },
-
- { 0, "------", "", 0xFFFF },
-
- { SH7095::GSREG_WTCSR, "WTCSR", "WTCSR", 1 },
- { SH7095::GSREG_WTCSRM, "WTCSRM", "WTCSRM", 1 },
- { SH7095::GSREG_WTCNT, "WTCNT", "WTCNT", 1 },
- { SH7095::GSREG_RSTCSR, "RSTCSR", "RSTCSR", 1 },
- { SH7095::GSREG_RSTCSRM, "RSTCSRM", "RSTCSRM", 1 },
+ { SH7095::GSREG_EP,		6,	"EP",		"Exception Pending", 4 },
+
+ { SH7095::GSREG_R0,		6,	"R0",		"R0", 4 },
+ { SH7095::GSREG_R1,		6,	"R1",		"R1",  4 },
+ { SH7095::GSREG_R2,		6,	"R2",		"R2",  4 },
+ { SH7095::GSREG_R3,		6,	"R3",		"R3",  4 },
+ { SH7095::GSREG_R4,		6,	"R4",		"R4",  4 },
+ { SH7095::GSREG_R5,		6,	"R5",		"R5",  4 },
+ { SH7095::GSREG_R6,		6,	"R6",		"R6",  4 },
+ { SH7095::GSREG_R7,		6,	"R7",		"R7",  4 },
+ { SH7095::GSREG_R8,		6,	"R8",		"R8",  4 },
+ { SH7095::GSREG_R9,		6,	"R9",		"R9",  4 },
+ { SH7095::GSREG_R10,		5,	"R10",		"R10",  4 },
+ { SH7095::GSREG_R11,		5,	"R11",		"R11",  4 },
+ { SH7095::GSREG_R12,		5,	"R12",		"R12",  4 },
+ { SH7095::GSREG_R13,		5,	"R13",		"R13",  4 },
+ { SH7095::GSREG_R14,		5,	"R14",		"R14",  4 },
+ { SH7095::GSREG_R15,		5,	"R15",		"R15/Stack Pointer", 4 },
+
+ { 0, 0, "----------------", "", 0xFFFF },
+
+ { SH7095::GSREG_SR,		6,	"SR",		"Status Register", 4 },
+ { SH7095::GSREG_GBR,		5,	"GBR",		"Global Base Register", 4 },
+ { SH7095::GSREG_VBR,		5,	"VBR",		"Vector Base Register", 4 },
+
+ { 0, 0, "----------------", "", 0xFFFF },
+
+ { SH7095::GSREG_MACH,		4,	"MACH",		"Multiply-and-Accumulate High", 4 },
+ { SH7095::GSREG_MACL,		4,	"MACL",		"Multiply-and-Accumulate Low", 4 },
+
+ { 0, 0, "----------------", "", 0xFFFF },
+
+ { SH7095::GSREG_PR,		6,	"PR",		"Procedure Register", 4 },
+
+ { 0, 0, "----------------", "", 0xFFFF },
+
+ { SH7095::GSREG_NMIL,		10,	"NMIL",		"NMI Level(Input)", 1 },
+ { SH7095::GSREG_IRL,		11,	"IRL",		"Interrupt Level(Input)", 1 },
+ { SH7095::GSREG_IPRA,		8,	"IPRA",		"IPRA", 2 },
+ { SH7095::GSREG_IPRB,		8,	"IPRB",		"IPRB", 2 },
+ { SH7095::GSREG_VCRWDT,	6,	"VCRWDT",	"VCRWDT", 2 },
+ { SH7095::GSREG_VCRA,		8,	"VCRA",		"VCRA", 2 },
+ { SH7095::GSREG_VCRB,		8,	"VCRB",		"VCRB", 2 },
+ { SH7095::GSREG_VCRC,		8,	"VCRC",		"VCRC", 2 },
+ { SH7095::GSREG_VCRD,		8,	"VCRD",		"VCRD", 2 },
+ { SH7095::GSREG_ICR,		9,	"ICR",		"ICR", 2 },
+
+ { 0, 0, "----------------", "", 0xFFFF },
+
+ { SH7095::GSREG_DVSR,		4,	"DVSR",		"Divisor", 4 },
+ { SH7095::GSREG_DVDNT,		3,	"DVDNT",	"DVDNT", 4 },
+ { SH7095::GSREG_DVDNTH,	2,	"DVDNTH",	"DVDNTH", 4 },
+ { SH7095::GSREG_DVDNTL,	2,	"DVDNTL",	"DVDNTL", 4 },
+ { SH7095::GSREG_DVDNTHS,	1,	"DVDNTHS",	"DVDNTH Shadow", 4 },
+ { SH7095::GSREG_DVDNTLS,	1,	"DVDNTLS",	"DVDNTL Shadow", 4 },
+ { SH7095::GSREG_VCRDIV,	6,	"VCRDIV",	"VCRDIV", 2 },
+ { SH7095::GSREG_DVCR,		10,	"DVCR",		"DVCR", 1 },
+
+ { 0, 0, "----------------", "", 0xFFFF },
+
+ { SH7095::GSREG_WTCSR,		9,	"WTCSR",	"WTCSR", 1 },
+ { SH7095::GSREG_WTCSRM,	8,	"WTCSRM",	"WTCSRM", 1 },
+ { SH7095::GSREG_WTCNT,		9,	"WTCNT",	"WTCNT", 1 },
+ { SH7095::GSREG_RSTCSR,	8,	"RSTCSR",	"RSTCSR", 1 },
+ { SH7095::GSREG_RSTCSRM,	7,	"RSTCSRM",	"RSTCSRM", 1 },
 
- { 0, "", "", 0 },
+ { 0, 0, "----------------", "", 0xFFFF },
+
+ { 0, 0, "", "", 0 },
 };
 
 static const RegType DBG_Regs_CPUE[] =
 {
- { SH7095::GSREG_DMAOR, "DMAOR", "DMAOR", 1 },
- { SH7095::GSREG_DMAORM, "DMAORM", "DMAORM", 1 },
+ { 0, 0, "------------", "", 0xFFFF },
+
+ { SH7095::GSREG_DMAOR,		5,	"DMAOR",	"DMAOR", 1 },
+ { SH7095::GSREG_DMAORM,	4,	"DMAORM",	"DMAORM", 1 },
+
+ { 0, 0, "---DMACH0---", "", 0xFFFF },
+ { SH7095::GSREG_DMA0_SAR,	1,	"SAR",		"SAR", 4 },
+ { SH7095::GSREG_DMA0_DAR,	1,	"DAR",		"DAR", 4 },
+ { SH7095::GSREG_DMA0_TCR,	1,	"TCR",		"TCR", 4 },
+ { SH7095::GSREG_DMA0_CHCR,	4,	"CHCR",		"CHCR", 2 },
+ { SH7095::GSREG_DMA0_CHCRM,	3,	"CHCRM",	"CHCRM", 2 },
+ { SH7095::GSREG_DMA0_VCR,	7,	"VCR",		"VCR", 1 },
+ { SH7095::GSREG_DMA0_DRCR,	6,	"DRCR",		"DRCR", 1 },
+
+ { 0, 0, "---DMACH1---", "", 0xFFFF },
+ { SH7095::GSREG_DMA1_SAR,	1,	"SAR",		"SAR", 4 },
+ { SH7095::GSREG_DMA1_DAR,	1,	"DAR",		"DAR", 4 },
+ { SH7095::GSREG_DMA1_TCR,	1,	"TCR",		"TCR", 4 },
+ { SH7095::GSREG_DMA1_CHCR,	4,	"CHCR",		"CHCR", 2 },
+ { SH7095::GSREG_DMA1_CHCRM,	3,	"CHCRM",	"CHCRM", 2 },
+ { SH7095::GSREG_DMA1_VCR,	7,	"VCR",		"VCR", 1 },
+ { SH7095::GSREG_DMA1_DRCR,	6,	"DRCR",		"DRCR", 1 },
+
+ { 0, 0, "------------", "", 0xFFFF },
+
+ { SH7095::GSREG_FRC,		5,	"FRC",		"FRC", 2 },
+ { SH7095::GSREG_OCR0,		4,	"OCRA",		"OCRA", 2 },
+ { SH7095::GSREG_OCR1,		4,	"OCRB",		"OCRB", 2 },
+ { SH7095::GSREG_FICR,		4,	"FICR",		"FICR", 2 },
+ { SH7095::GSREG_TIER,		6,	"TIER",		"TIER", 1 },
+ { SH7095::GSREG_FTCSR,		5,	"FTCSR",	"FTCSR", 1 },
+ { SH7095::GSREG_FTCSRM,	4,	"FTCSRM",	"FTCSRM", 1 },
+ { SH7095::GSREG_TCR,		7,	"TCR",		"TCR", 1 },
+ { SH7095::GSREG_TOCR,		6,	"TOCR",		"TOCR", 1 },
+ { SH7095::GSREG_RWT,		7,	"RWT",		"R/W Temp", 1 },
 
- { 0, "--DMACH0:--", "", 0xFFFF },
- { SH7095::GSREG_DMA0_SAR, "SAR", "SAR", 4 },
- { SH7095::GSREG_DMA0_DAR, "DAR", "DAR", 4 },
- { SH7095::GSREG_DMA0_TCR, "TCR", "TCR", 4 },
- { SH7095::GSREG_DMA0_CHCR, "CHCR", "CHCR", 2 },
- { SH7095::GSREG_DMA0_CHCRM, "CHCRM", "CHCRM", 2 },
- { SH7095::GSREG_DMA0_VCR, "VCR", "VCR", 1 },
- { SH7095::GSREG_DMA0_DRCR, "DRCR", "DRCR", 1 },
-
- { 0, "--DMACH1:--", "", 0xFFFF },
- { SH7095::GSREG_DMA1_SAR, "SAR", "SAR", 4 },
- { SH7095::GSREG_DMA1_DAR, "DAR", "DAR", 4 },
- { SH7095::GSREG_DMA1_TCR, "TCR", "TCR", 4 },
- { SH7095::GSREG_DMA1_CHCR, "CHCR", "CHCR", 2 },
- { SH7095::GSREG_DMA1_CHCRM, "CHCRM", "CHCRM", 2 },
- { SH7095::GSREG_DMA1_VCR, "VCR", "VCR", 1 },
- { SH7095::GSREG_DMA1_DRCR, "DRCR", "DRCR", 1 },
-
- { 0, "-----------", "", 0xFFFF },
-
- { SH7095::GSREG_FRC, "FRC", "FRC", 2 },
- { SH7095::GSREG_OCR0, "OCRA", "OCRA", 2 },
- { SH7095::GSREG_OCR1, "OCRB", "OCRB", 2 },
- { SH7095::GSREG_FICR, "FICR", "FICR", 2 },
- { SH7095::GSREG_TIER, "TIER", "TIER", 1 },
- { SH7095::GSREG_FTCSR, "FTCSR", "FTCSR", 1 },
- { SH7095::GSREG_FTCSRM, "FTCSRM", "FTCSRM", 1 },
- { SH7095::GSREG_TCR, "TCR", "TCR", 1 },
- { SH7095::GSREG_TOCR, "TOCR", "TOCR", 1 },
- { SH7095::GSREG_RWT, "RWT", "R/W Temp", 1 },
+ { 0, 0, "------------", "", 0xFFFF },
 
- { 0, "", "", 0 },
+ { 0, 0, "", "", 0 },
 };
 
 static uint32 DBG_GetRegister_CPU(const unsigned int id, char* special, const uint32 special_len)
@@ -639,63 +647,66 @@
 
 static const RegType DBG_Regs_SCU_CDB_VDP1[] =
 {
- { SCU_GSREG_ILEVEL, "ILevel", "IRL Output to SH2-M", 1 },
- { SCU_GSREG_IVEC, "IVec", "Pending IRQ Vector Number", 1 },
+ { 0, 0, "--------------", "", 0xFFFF },
 
- { 0, "------", "", 0xFFFF },
+ { SCU_GSREG_ILEVEL,			6,	"ILevel",	"IRL Output to SH2-M", 1 },
+ { SCU_GSREG_IVEC,			8,	"IVec",		"Pending IRQ Vector Number", 1 },
 
- { SCU_GSREG_IASSERTED, "IAss", "Status of Input IRQ Lines", 4 },
- { SCU_GSREG_IPENDING, "IPend", "Pending IRQs", 4 },
- { SCU_GSREG_IMASK, "IMask", "IRQ Mask", 2 },
+ { 0, 0, "--------------", "", 0xFFFF },
 
- { 0, "------", "", 0xFFFF },
+ { SCU_GSREG_IASSERTED,			2,	"IAss",		"Status of Input IRQ Lines", 4 },
+ { SCU_GSREG_IPENDING,			1,	"IPend",	"Pending IRQs", 4 },
+ { SCU_GSREG_IMASK,			5,	"IMask",	"IRQ Mask", 2 },
 
- { SCU_GSREG_TENBL, "TENBL", "Timers Enable", 0x100 | 1 },
+ { 0, 0, "--------------", "", 0xFFFF },
 
- { SCU_GSREG_T0CNT, "T0CNT", "Timer0 Counter", 0x100 | 10 },
- { SCU_GSREG_T0CMP, "T0CMP", "Timer0 Compare Value", 0x100 | 10 },
- { SCU_GSREG_T0MET, "T0MET", "Timer0 Met", 0x100 | 1 },
+ { SCU_GSREG_TENBL,			8,	"TENBL",	"Timers Enable", 0x100 | 1 },
 
- { SCU_GSREG_T1RLV, "T1RLV", "Timer1 Reload Value", 0x100 | 9 },
- { SCU_GSREG_T1CNT, "T1CNT", "Timer1 Counter", 0x100 | 9 },
- { SCU_GSREG_T1MOD, "T1MOD", "Timer1 Mode", 0x100 | 1 },
- { SCU_GSREG_T1MET, "T1MET", "Timer1 Met", 0x100 | 1 },
+ { SCU_GSREG_T0CNT,			6,	"T0CNT",	"Timer0 Counter", 0x100 | 10 },
+ { SCU_GSREG_T0CMP,			6,	"T0CMP",	"Timer0 Compare Value", 0x100 | 10 },
+ { SCU_GSREG_T0MET,			8,	"T0MET",	"Timer0 Met", 0x100 | 1 },
 
- { 0, "--DSP:--", "", 0xFFFF },
+ { SCU_GSREG_T1RLV,			6,	"T1RLV",	"Timer1 Reload Value", 0x100 | 9 },
+ { SCU_GSREG_T1CNT,			6,	"T1CNT",	"Timer1 Counter", 0x100 | 9 },
+ { SCU_GSREG_T1MOD,			8,	"T1MOD",	"Timer1 Mode", 0x100 | 1 },
+ { SCU_GSREG_T1MET,			8,	"T1MET",	"Timer1 Met", 0x100 | 1 },
 
- { SCU_GSREG_DSP_EXEC, "EXEC", "Executing", 0x100 | 1 },
- { SCU_GSREG_DSP_PAUSE, "PAUSE", "Paused", 0x100 | 1 },
- { SCU_GSREG_DSP_PC, "PC", "Program Counter", 1 },
- { SCU_GSREG_DSP_END, "END", "End Flag", 0x100 | 1 },
+ { 0, 0, "-----DSP:-----", "", 0xFFFF },
 
- { 0, "------", "", 0xFFFF },
+ { SCU_GSREG_DSP_EXEC,			9,	"EXEC",		"Executing", 0x100 | 1 },
+ { SCU_GSREG_DSP_PAUSE,			8,	"PAUSE",	"Paused", 0x100 | 1 },
+ { SCU_GSREG_DSP_PC,			10,	"PC",		"Program Counter", 1 },
+ { SCU_GSREG_DSP_END,			10,	"END",		"End Flag", 0x100 | 1 },
 
- { (1 << 16) | CDB_GSREG_HIRQ, "HIRQ", "HIRQ", 2 },
- { (1 << 16) | CDB_GSREG_HIRQ_MASK, "HIRQM", "HIRQ Mask", 2 },
+ { 0, 0, "--------------", "", 0xFFFF },
 
- { (1 << 16) | CDB_GSREG_CDATA0, "CDATA0", "Command Data 0", 2 },
- { (1 << 16) | CDB_GSREG_CDATA1, "CDATA1", "Command Data 1", 2 },
- { (1 << 16) | CDB_GSREG_CDATA2, "CDATA2", "Command Data 2", 2 },
- { (1 << 16) | CDB_GSREG_CDATA3, "CDATA3", "Command Data 3", 2 },
+ { (1 << 16) | CDB_GSREG_HIRQ,		6,	"HIRQ",		"HIRQ", 2 },
+ { (1 << 16) | CDB_GSREG_HIRQ_MASK,	5,	"HIRQM",	"HIRQ Mask", 2 },
 
- { (1 << 16) | CDB_GSREG_RESULT0, "RES0", "Result Data 0", 2 },
- { (1 << 16) | CDB_GSREG_RESULT1, "RES1", "Result Data 1", 2 },
- { (1 << 16) | CDB_GSREG_RESULT2, "RES2", "Result Data 2", 2 },
- { (1 << 16) | CDB_GSREG_RESULT3, "RES3", "Result Data 3", 2 },
+ { (1 << 16) | CDB_GSREG_CDATA0,	4,	"CDATA0",	"Command Data 0", 2 },
+ { (1 << 16) | CDB_GSREG_CDATA1,	4,	"CDATA1",	"Command Data 1", 2 },
+ { (1 << 16) | CDB_GSREG_CDATA2,	4,	"CDATA2",	"Command Data 2", 2 },
+ { (1 << 16) | CDB_GSREG_CDATA3,	4,	"CDATA3",	"Command Data 3", 2 },
 
- { 0, "------", "", 0xFFFF },
+ { (1 << 16) | CDB_GSREG_RESULT0,	6,	"RES0",		"Result Data 0", 2 },
+ { (1 << 16) | CDB_GSREG_RESULT1,	6,	"RES1",		"Result Data 1", 2 },
+ { (1 << 16) | CDB_GSREG_RESULT2,	6,	"RES2",		"Result Data 2", 2 },
+ { (1 << 16) | CDB_GSREG_RESULT3,	6,	"RES3",		"Result Data 3", 2 },
 
- { (2 << 16) | VDP1::GSREG_SYSCLIPX, "SClipX", "SysClipX", 2 },
- { (2 << 16) | VDP1::GSREG_SYSCLIPY, "SClipY", "SysClipY", 2 },
- { (2 << 16) | VDP1::GSREG_USERCLIPX0, "UClipX0", "UserClipX0", 2 },
- { (2 << 16) | VDP1::GSREG_USERCLIPY0, "UClipY0", "UserClipY0", 2 },
- { (2 << 16) | VDP1::GSREG_USERCLIPX1, "UClipX1", "UserClipX1", 2 },
- { (2 << 16) | VDP1::GSREG_USERCLIPY1, "UClipY1", "UserClipY1", 2 },
- { (2 << 16) | VDP1::GSREG_LOCALX, "LocalX", "LocalX", 2 },
- { (2 << 16) | VDP1::GSREG_LOCALY, "LocalY", "LocalY", 2 },
+ { 0, 0, "--------------", "", 0xFFFF },
 
+ { (2 << 16) | VDP1::GSREG_SYSCLIPX,	4,	"SClipX",	"SysClipX", 2 },
+ { (2 << 16) | VDP1::GSREG_SYSCLIPY,	4,	"SClipY",	"SysClipY", 2 },
+ { (2 << 16) | VDP1::GSREG_USERCLIPX0,	3,	"UClipX0",	"UserClipX0", 2 },
+ { (2 << 16) | VDP1::GSREG_USERCLIPY0,	3,	"UClipY0",	"UserClipY0", 2 },
+ { (2 << 16) | VDP1::GSREG_USERCLIPX1,	3,	"UClipX1",	"UserClipX1", 2 },
+ { (2 << 16) | VDP1::GSREG_USERCLIPY1,	3,	"UClipY1",	"UserClipY1", 2 },
+ { (2 << 16) | VDP1::GSREG_LOCALX,	4,	"LocalX",	"LocalX", 2 },
+ { (2 << 16) | VDP1::GSREG_LOCALY,	4,	"LocalY",	"LocalY", 2 },
 
- { 0, "", "", 0 },
+ { 0, 0, "--------------", "", 0xFFFF },
+
+ { 0, 0, "", "", 0 },
 };
 
 static uint32 GetRegister(const unsigned id, char* const special, const uint32 special_len)
@@ -738,68 +749,72 @@
 
 static const RegType DBG_Regs_VDP2_SCSP[] =
 {
- { (3 << 16) | VDP2::GSREG_LINE, "Line", "Line", 2 },
- { (3 << 16) | VDP2::GSREG_DON, "DON", "Display On", 0x100 | 1 },
- { (3 << 16) | VDP2::GSREG_BM, "BM", "Border Mode", 0x100 | 1 },
- { (3 << 16) | VDP2::GSREG_IM, "IM", "Interlace Mode", 0x100 | 2 },
- { (3 << 16) | VDP2::GSREG_VRES, "VRES", "Vertical Resolution", 0x100 | 2 },
- { (3 << 16) | VDP2::GSREG_HRES, "HRES", "Horizontal Resolution", 0x100 | 3 },
-
- { 0, "------", "", 0xFFFF },
-
- { (3 << 16) | VDP2::GSREG_RAMCTL, "RAMCTL", "RAM Control", 2 },
- { (3 << 16) | VDP2::GSREG_CYCA0, "A0", "CYCA0", 4 },
- { (3 << 16) | VDP2::GSREG_CYCA1, "A1", "CYCA1", 4 },
- { (3 << 16) | VDP2::GSREG_CYCB0, "B0", "CYCB0", 4 },
- { (3 << 16) | VDP2::GSREG_CYCB1, "B1", "CYCB1", 4 },
-
- { 0, "------", "", 0xFFFF },
-
- { (3 << 16) | VDP2::GSREG_BGON, "BGON", "BGON", 2 },
- { (3 << 16) | VDP2::GSREG_MZCTL, "MZCTL", "MZCTL", 2 },
- { (3 << 16) | VDP2::GSREG_SFSEL, "SFSEL", "SFSEL", 2 },
- { (3 << 16) | VDP2::GSREG_SFCODE, "SFCODE", "SFCODE", 2 },
- { (3 << 16) | VDP2::GSREG_CHCTLA, "CHCTLA", "CHCTLA", 2 },
- { (3 << 16) | VDP2::GSREG_CHCTLB, "CHCTLB", "CHCTLB", 2 },
-
- { 0, "------", "", 0xFFFF },
-
- { (3 << 16) | VDP2::GSREG_SCXIN0, "SCXIN0", "SCXIN0", 2 },
- { (3 << 16) | VDP2::GSREG_SCXDN0, "SCXDN0", "SCXDN0", 2 },
- { (3 << 16) | VDP2::GSREG_SCYIN0, "SCYIN0", "SCYIN0", 2 },
- { (3 << 16) | VDP2::GSREG_SCYDN0, "SCYDN0", "SCYDN0", 2 },
- { (3 << 16) | VDP2::GSREG_ZMXIN0, "ZMXIN0", "ZMXIN0", 2 },
- { (3 << 16) | VDP2::GSREG_ZMXDN0, "ZMXDN0", "ZMXDN0", 2 },
- { (3 << 16) | VDP2::GSREG_ZMYIN0, "ZMYIN0", "ZMYIN0", 2 },
- { (3 << 16) | VDP2::GSREG_ZMYDN0, "ZMYDN0", "ZMYDN0", 2 },
-
- { (3 << 16) | VDP2::GSREG_SCXIN1, "SCXIN1", "SCXIN1", 2 },
- { (3 << 16) | VDP2::GSREG_SCXDN1, "SCXDN1", "SCXDN1", 2 },
- { (3 << 16) | VDP2::GSREG_SCYIN1, "SCYIN1", "SCYIN1", 2 },
- { (3 << 16) | VDP2::GSREG_SCYDN1, "SCYDN1", "SCYDN1", 2 },
- { (3 << 16) | VDP2::GSREG_ZMXIN1, "ZMXIN1", "ZMXIN1", 2 },
- { (3 << 16) | VDP2::GSREG_ZMXDN1, "ZMXDN1", "ZMXDN1", 2 },
- { (3 << 16) | VDP2::GSREG_ZMYIN1, "ZMYIN1", "ZMYIN1", 2 },
- { (3 << 16) | VDP2::GSREG_ZMYDN1, "ZMYDN1", "ZMYDN1", 2 },
-
- { (3 << 16) | VDP2::GSREG_SCYN3, "SCXN2", "SCXN2", 2 },
- { (3 << 16) | VDP2::GSREG_SCYN3, "SCYN2", "SCYN2", 2 },
- { (3 << 16) | VDP2::GSREG_SCYN3, "SCXN3", "SCXN3", 2 },
- { (3 << 16) | VDP2::GSREG_SCYN3, "SCYN3", "SCYN3", 2 },
-
- { (3 << 16) | VDP2::GSREG_ZMCTL, "ZMCTL", "ZMCTL", 2 },
- { (3 << 16) | VDP2::GSREG_SCRCTL, "SCRCTL", "SCRCTL", 2 },
-
- { 0, "------", "", 0xFFFF },
-
- { (4 << 16) | SS_SCSP::GSREG_MVOL, "MVOL", "Master Volume", 0x100 | 4 },
- { (4 << 16) | SS_SCSP::GSREG_DAC18B, "DAC18B", "18-bit DAC Enable", 0x100 | 1 },
- { (4 << 16) | SS_SCSP::GSREG_MEM4MB, "Mem4Mb", "4Mb Memory Enable", 0x100 | 1 },
- { (4 << 16) | SS_SCSP::GSREG_RBP, "RBP", "DSP Ringbuffer Base Address", 0x100 | 7 },
- { (4 << 16) | SS_SCSP::GSREG_RBL, "RBL", "DSP Ringbuffer Length", 0x100 | 2 },
- { (4 << 16) | SS_SCSP::GSREG_MSLC, "MSLC", "Slot to Monitor", 0x100 | 5 },
+ { 0, 0, "-----------", "", 0xFFFF },
+
+ { (3 << 16) | VDP2::GSREG_LINE,	3,	"Line",		"Line", 2 },
+ { (3 << 16) | VDP2::GSREG_DON,		7,	"DON",		"Display On", 0x100 | 1 },
+ { (3 << 16) | VDP2::GSREG_BM,		8,	"BM",		"Border Mode", 0x100 | 1 },
+ { (3 << 16) | VDP2::GSREG_IM,		8,	"IM",		"Interlace Mode", 0x100 | 2 },
+ { (3 << 16) | VDP2::GSREG_VRES,	6,	"VRES",		"Vertical Resolution", 0x100 | 2 },
+ { (3 << 16) | VDP2::GSREG_HRES,	6,	"HRES",		"Horizontal Resolution", 0x100 | 3 },
+
+ { 0, 0, "-----------", "", 0xFFFF },
+
+ { (3 << 16) | VDP2::GSREG_RAMCTL,	1,	"RAMCTL",	"RAM Control", 2 },
+ { (3 << 16) | VDP2::GSREG_CYCA0,	1,	"A0",		"CYCA0", 4 },
+ { (3 << 16) | VDP2::GSREG_CYCA1,	1,	"A1",		"CYCA1", 4 },
+ { (3 << 16) | VDP2::GSREG_CYCB0,	1,	"B0",		"CYCB0", 4 },
+ { (3 << 16) | VDP2::GSREG_CYCB1,	1,	"B1",		"CYCB1", 4 },
+
+ { 0, 0, "-----------", "", 0xFFFF },
+
+ { (3 << 16) | VDP2::GSREG_BGON,	3,	"BGON",		"BGON", 2 },
+ { (3 << 16) | VDP2::GSREG_MZCTL,	2,	"MZCTL",	"MZCTL", 2 },
+ { (3 << 16) | VDP2::GSREG_SFSEL,	2,	"SFSEL",	"SFSEL", 2 },
+ { (3 << 16) | VDP2::GSREG_SFCODE,	1,	"SFCODE",	"SFCODE", 2 },
+ { (3 << 16) | VDP2::GSREG_CHCTLA,	1,	"CHCTLA",	"CHCTLA", 2 },
+ { (3 << 16) | VDP2::GSREG_CHCTLB,	1,	"CHCTLB",	"CHCTLB", 2 },
+
+ { 0, 0, "-----------", "", 0xFFFF },
+
+ { (3 << 16) | VDP2::GSREG_SCXIN0,	1,	"SCXIN0",	"SCXIN0", 2 },
+ { (3 << 16) | VDP2::GSREG_SCXDN0,	1,	"SCXDN0",	"SCXDN0", 2 },
+ { (3 << 16) | VDP2::GSREG_SCYIN0,	1,	"SCYIN0",	"SCYIN0", 2 },
+ { (3 << 16) | VDP2::GSREG_SCYDN0,	1,	"SCYDN0",	"SCYDN0", 2 },
+ { (3 << 16) | VDP2::GSREG_ZMXIN0,	1,	"ZMXIN0",	"ZMXIN0", 2 },
+ { (3 << 16) | VDP2::GSREG_ZMXDN0,	1,	"ZMXDN0",	"ZMXDN0", 2 },
+ { (3 << 16) | VDP2::GSREG_ZMYIN0,	1,	"ZMYIN0",	"ZMYIN0", 2 },
+ { (3 << 16) | VDP2::GSREG_ZMYDN0,	1,	"ZMYDN0",	"ZMYDN0", 2 },
+
+ { (3 << 16) | VDP2::GSREG_SCXIN1,	1,	"SCXIN1",	"SCXIN1", 2 },
+ { (3 << 16) | VDP2::GSREG_SCXDN1,	1,	"SCXDN1",	"SCXDN1", 2 },
+ { (3 << 16) | VDP2::GSREG_SCYIN1,	1,	"SCYIN1",	"SCYIN1", 2 },
+ { (3 << 16) | VDP2::GSREG_SCYDN1,	1,	"SCYDN1",	"SCYDN1", 2 },
+ { (3 << 16) | VDP2::GSREG_ZMXIN1,	1,	"ZMXIN1",	"ZMXIN1", 2 },
+ { (3 << 16) | VDP2::GSREG_ZMXDN1,	1,	"ZMXDN1",	"ZMXDN1", 2 },
+ { (3 << 16) | VDP2::GSREG_ZMYIN1,	1,	"ZMYIN1",	"ZMYIN1", 2 },
+ { (3 << 16) | VDP2::GSREG_ZMYDN1,	1,	"ZMYDN1",	"ZMYDN1", 2 },
+
+ { (3 << 16) | VDP2::GSREG_SCYN3,	2,	"SCXN2",	"SCXN2", 2 },
+ { (3 << 16) | VDP2::GSREG_SCYN3,	2,	"SCYN2",	"SCYN2", 2 },
+ { (3 << 16) | VDP2::GSREG_SCYN3,	2,	"SCXN3",	"SCXN3", 2 },
+ { (3 << 16) | VDP2::GSREG_SCYN3,	2,	"SCYN3",	"SCYN3", 2 },
+
+ { (3 << 16) | VDP2::GSREG_ZMCTL,	2,	"ZMCTL",	"ZMCTL", 2 },
+ { (3 << 16) | VDP2::GSREG_SCRCTL,	1,	"SCRCTL",	"SCRCTL", 2 },
+
+ { 0, 0, "-----------", "", 0xFFFF },
+
+ { (4 << 16) | SS_SCSP::GSREG_MVOL,	6,	"MVOL",		"Master Volume", 0x100 | 4 },
+ { (4 << 16) | SS_SCSP::GSREG_DAC18B,	4,	"DAC18B",	"18-bit DAC Enable", 0x100 | 1 },
+ { (4 << 16) | SS_SCSP::GSREG_MEM4MB,	4,	"Mem4Mb",	"4Mb Memory Enable", 0x100 | 1 },
+ { (4 << 16) | SS_SCSP::GSREG_RBP,	6,	"RBP",		"DSP Ringbuffer Base Address", 0x100 | 7 },
+ { (4 << 16) | SS_SCSP::GSREG_RBL,	7,	"RBL",		"DSP Ringbuffer Length", 0x100 | 2 },
+ { (4 << 16) | SS_SCSP::GSREG_MSLC,	5,	"MSLC",		"Slot to Monitor", 0x100 | 5 },
+
+ { 0, 0, "-----------", "", 0xFFFF },
 
- { 0, "", "", 0 },
+ { 0, 0, "", "", 0 },
 };
 
 static const RegGroupType DBG_RegGroup_VDP2_SCSP =
diff -Naur mednafen-pure/src/wswan/debug.cpp mednafen/src/wswan/debug.cpp
--- mednafen-pure/src/wswan/debug.cpp	2019-01-27 22:52:37.000000000 -0800
+++ mednafen/src/wswan/debug.cpp	2019-03-07 17:42:51.253282500 -0800
@@ -395,21 +395,25 @@
 
 static const RegType V30MZ_Regs[] =
 {
-        { NEC_PC, "IP", "Instruction Pointer", 2 },
-        { NEC_FLAGS, "PSW", "Program Status Word", 2 },
-        { NEC_AW, "AX", "Accumulator", 2 },
-        { NEC_BW, "BX", "Base", 2 },
-        { NEC_CW, "CX", "Counter", 2 },
-        { NEC_DW, "DX", "Data", 2 },
-        { NEC_SP, "SP", "Stack Pointer", 2 },
-        { NEC_BP, "BP", "Base Pointer", 2 },
-        { NEC_IX, "SI", "Source Index", 2 },
-        { NEC_IY, "DI", "Dest Index", 2 },
-        { NEC_PS, "CS", "Program Segment", 2 },
-        { NEC_SS, "SS", "Stack Segment", 2 },
-        { NEC_DS0, "DS", "Data Segment", 2 },
-        { NEC_DS1, "ES", "Extra Segment(Destination)", 2 },
-        { 0, "", "", 0 },
+ { 0, 0, "---CPU---", "", 0xFFFF },
+ { NEC_PC,      3,      "IP", "Instruction Pointer", 2 },
+ { NEC_FLAGS,   2,      "PSW", "Program Status Word", 2 },
+ { 0, 0, "---REG---", "", 0xFFFF },
+ { NEC_AW,      3,      "AX", "Accumulator", 2 },
+ { NEC_BW,      3,      "BX", "Base", 2 },
+ { NEC_CW,      3,      "CX", "Counter", 2 },
+ { NEC_DW,      3,      "DX", "Data", 2 },
+ { NEC_IX,      3,      "SI", "Source Index", 2 },
+ { NEC_IY,      3,      "DI", "Dest Index", 2 },
+ { NEC_BP,      3,      "BP", "Base Pointer", 2 },
+ { NEC_SP,      3,      "SP", "Stack Pointer", 2 },
+ { 0, 0, "---SEG---", "", 0xFFFF },
+ { NEC_PS,      3,      "CS", "Program Segment", 2 },
+ { NEC_SS,      3,      "SS", "Stack Segment", 2 },
+ { NEC_DS0,     3,      "DS", "Data Segment", 2 },
+ { NEC_DS1,     3,      "ES", "Extra Segment(Destination)", 2 },
+ { 0, 0, "---------", "", 0xFFFF },
+ { 0, 0, "", "", 0 },
 };
 
 
@@ -437,16 +441,19 @@
 
 static const RegType MiscRegs[] =
 {
- { MEMORY_GSREG_ROMBBSLCT, "ROMBBSLCT", "ROM Bank Base Selector for 64KiB banks 0x4-0xF", 1 },
- { MEMORY_GSREG_BNK1SLCT, "BNK1SLCT", "???", 1 },
- { MEMORY_GSREG_BNK2SLCT, "BNK2SLCT", "ROM Bank Selector for 64KiB bank 0x2", 1 },
- { MEMORY_GSREG_BNK3SLCT, "BNK3SLCT", "ROM Bank Selector for 64KiB bank 0x3", 1 },
-
- { 0x8000 | INT_GSREG_IASSERTED, "IAsserted", "Interrupt Asserted", 1 },
- { 0x8000 | INT_GSREG_ISTATUS, "IStatus", "Interrupt Status", 1 },
- { 0x8000 | INT_GSREG_IENABLE, "IEnable", "Interrupt Enable", 1 },
- { 0x8000 | INT_GSREG_IVECTORBASE, "IVectorBase", "Interrupt Vector Base", 1 },
- { 0, "", "", 0 },
+ { 0, 0, "------BNK------", "", 0xFFFF },
+ { MEMORY_GSREG_BNK1SLCT,               3,      "Bnk1Select",   "???", 1 },
+ { MEMORY_GSREG_BNK2SLCT,               3,      "Bnk2Select",   "ROM Bank Selector for 64KiB bank 0x2", 1 },
+ { MEMORY_GSREG_BNK3SLCT,               3,      "Bnk3Select",   "ROM Bank Selector for 64KiB bank 0x3", 1 },
+ { MEMORY_GSREG_ROMBBSLCT,              3,      "RomBSelect",   "ROM Bank Base Selector for 64KiB banks 0x4-0xF", 1 },
+
+ { 0, 0, "------IRQ------", "", 0xFFFF },
+ { 0x8000 | INT_GSREG_IASSERTED,        4,      "IrqAssert",    "Interrupt Asserted", 1 },
+ { 0x8000 | INT_GSREG_ISTATUS,          4,      "IrqStatus",    "Interrupt Status", 1 },
+ { 0x8000 | INT_GSREG_IENABLE,          4,      "IrqEnable",    "Interrupt Enable", 1 },
+ { 0x8000 | INT_GSREG_IVECTORBASE,      3,      "IrqVectors",   "Interrupt Vector Base", 1 },
+ { 0, 0, "---------------", "", 0xFFFF },
+ { 0, 0, "", "", 0 },
 };
 
 static uint32 Misc_GetRegister(const unsigned int id, char *special, const uint32 special_len)
diff -Naur mednafen-pure/src/wswan/gfx.cpp mednafen/src/wswan/gfx.cpp
--- mednafen-pure/src/wswan/gfx.cpp	2019-01-27 22:52:37.000000000 -0800
+++ mednafen/src/wswan/gfx.cpp	2019-03-07 17:42:51.268882500 -0800
@@ -104,39 +104,40 @@
 
 static const RegType WSwanGfxRegs[] =
 {
- { GFX_GSREG_DISPCONTROL, "DispControl", "Display Control", 1 },
- { GFX_GSREG_VIDEOMODE, "VideoMode", "Video Mode", 1 },
- { GFX_GSREG_LCDCONTROL, "LCDControl", "LCD Control", 1 },
- { GFX_GSREG_LCDICONS, "LCDIcons", "LCD Icons", 1 },
- { GFX_GSREG_LCDVTOTAL, "LCDVtotal", "LCD Vtotal", 1 },
- { GFX_GSREG_BTIMERCONTROL, "BTimerControl", "VB/HB Timer Control", 1 },
- { GFX_GSREG_HBTIMERPERIOD, "HBTimerPeriod", "Horizontal blank timer counter period", 2 },
- { GFX_GSREG_VBTIMERPERIOD, "VBTimerPeriod", "Vertical blank timer counter period", 2 },
- { GFX_GSREG_HBCOUNTER, "HBCounter", "Horizontal blank counter", 1 },
- { GFX_GSREG_VBCOUNTER, "VBCounter", "Vertical blank counter", 1 },
- { GFX_GSREG_BGCOLOR, "BGColor", "Background Color", 1 },
- { GFX_GSREG_LINECOMPARE, "LineCompare", "Line Compare", 1 },
- { GFX_GSREG_SPRBASE, "SPRBase", "Sprite Table Base", 1 },
- { GFX_GSREG_SPRITESTART, "SpriteStart", "SpriteStart", 1 },
- { GFX_GSREG_SPRITECOUNT, "SpriteCount", "SpriteCount", 1 },
-
- { GFX_GSREG_FGBGLOC, "FGBGLoc", "FG/BG Map Location", 1 },
-
- { GFX_GSREG_FGX0, "FGx0", "Foreground Window X0", 1 }, 
- { GFX_GSREG_FGY0, "FGy0", "Foreground Window Y0", 1 },
- { GFX_GSREG_FGX1, "FGx1", "Foreground Window X1", 1 },
- { GFX_GSREG_FGY1, "FGy1", "Foreground Window Y1", 1 },
- { GFX_GSREG_SPRX0, "SPRx0", "Sprite Window X0", 1 },
- { GFX_GSREG_SPRY0, "SPRy0", "Sprite Window Y0", 1 },
- { GFX_GSREG_SPRX1, "SPRx1", "Sprite Window X1", 1 },
- { GFX_GSREG_SPRY1, "SPRy1", "Sprite Window Y1", 1 },
-
- { GFX_GSREG_BGXSCROLL, "BGXScroll", "Background X Scroll", 1 },
- { GFX_GSREG_BGYSCROLL, "BGYScroll", "Background Y Scroll", 1 },
- { GFX_GSREG_FGXSCROLL, "FGXScroll", "Foreground X Scroll", 1 },
- { GFX_GSREG_FGYSCROLL, "FGYScroll", "Foreground Y Scroll", 1 },
-
- { 0, "", "", 0 },
+ { 0, 0, "----LCD-DISPLAY----", "", 0xFFFF },
+ { GFX_GSREG_DISPCONTROL,	6,	"DispControl", "Display Control", 1 },
+ { GFX_GSREG_VIDEOMODE,		8,	"VideoMode", "Video Mode", 1 },
+ { GFX_GSREG_LCDCONTROL,	7,	"LCDControl", "LCD Control", 1 },
+ { GFX_GSREG_LCDICONS,		9,	"LCDIcons", "LCD Icons", 1 },
+ { GFX_GSREG_LCDVTOTAL,		8,	"LCDVtotal", "LCD Vtotal", 1 },
+ { GFX_GSREG_BTIMERCONTROL,	4,	"BTimerControl", "VB/HB Timer Control", 1 },
+ { GFX_GSREG_HBTIMERPERIOD,	2,	"HBTimerPeriod", "Horizontal blank timer counter period", 2 },
+ { GFX_GSREG_VBTIMERPERIOD,	2,	"VBTimerPeriod", "Vertical blank timer counter period", 2 },
+ { GFX_GSREG_HBCOUNTER,		8,	"HBCounter", "Horizontal blank counter", 1 },
+ { GFX_GSREG_VBCOUNTER,		6,	"VBCounter", "Vertical blank counter", 1 },
+ { GFX_GSREG_BGCOLOR,		10,	"BGColor", "Background Color", 1 },
+ { GFX_GSREG_LINECOMPARE,	6,	"LineCompare", "Line Compare", 1 },
+ { 0, 0, "----BACKGROUNDS----", "", 0xFFFF },
+ { GFX_GSREG_FGBGLOC,		10,	"FGBGLoc", "FG/BG Map Location", 1 },
+ { GFX_GSREG_FGXSCROLL,		8,	"FGXScroll", "Foreground X Scroll", 1 },
+ { GFX_GSREG_FGYSCROLL,		8,	"FGYScroll", "Foreground Y Scroll", 1 },
+ { GFX_GSREG_BGXSCROLL,		8,	"BGXScroll", "Background X Scroll", 1 },
+ { GFX_GSREG_BGYSCROLL,		8,	"BGYScroll", "Background Y Scroll", 1 },
+ { 0, 0, "------SPRITES------", "", 0xFFFF },
+ { GFX_GSREG_SPRBASE,		7,	"SpriteBase", "Sprite Table Base", 1 },
+ { GFX_GSREG_SPRITESTART,	6,	"SpriteStart", "SpriteStart", 1 },
+ { GFX_GSREG_SPRITECOUNT,	6,	"SpriteCount", "SpriteCount", 1 },
+ { 0, 0, "------WINDOWS------", "", 0xFFFF },
+ { GFX_GSREG_FGX0,		13,	"FGx0", "Foreground Window X0", 1 }, 
+ { GFX_GSREG_FGY0,		13,	"FGy0", "Foreground Window Y0", 1 },
+ { GFX_GSREG_FGX1,		13,	"FGx1", "Foreground Window X1", 1 },
+ { GFX_GSREG_FGY1,		13,	"FGy1", "Foreground Window Y1", 1 },
+ { GFX_GSREG_SPRX0,		12,	"SPRx0", "Sprite Window X0", 1 },
+ { GFX_GSREG_SPRY0,		12,	"SPRy0", "Sprite Window Y0", 1 },
+ { GFX_GSREG_SPRX1,		12,	"SPRx1", "Sprite Window X1", 1 },
+ { GFX_GSREG_SPRY1,		12,	"SPRy1", "Sprite Window Y1", 1 },
+ { 0, 0, "-------------------", "", 0xFFFF },
+ { 0, 0, "", "", 0 },
 };
 
 uint32 WSwan_GfxGetRegister(const unsigned id, char* special, const uint32 special_len)
